// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191105040406_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("BO.Models.Article", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<Guid>("CreatedByUid");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("Like");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUid");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("BO.Models.ArticleComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ArticleId");

                    b.Property<Guid>("CommentId");

                    b.Property<bool>("IsDelete");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("CommentId");

                    b.ToTable("ArticleComments");
                });

            modelBuilder.Entity("BO.Models.ArticleTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ArticleId");

                    b.Property<bool>("IsDelete");

                    b.Property<Guid>("TagId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("TagId");

                    b.ToTable("ArticleTags");
                });

            modelBuilder.Entity("BO.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Context");

                    b.Property<DateTime>("Date");

                    b.Property<bool>("IsDelete");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("BO.Models.Follow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FollowerId");

                    b.Property<bool>("IsDelete");

                    b.HasKey("Id");

                    b.HasAlternateKey("FollowerId")
                        .HasName("AlternateKey_FollowerId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("BO.Models.Like", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("ArticleId");

                    b.Property<bool>("IsDelete");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("BO.Models.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<int>("TagCount");

                    b.Property<string>("TagName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("TagName")
                        .HasName("AlternateKey_TagName");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("BO.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("About");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Img");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Password");

                    b.Property<string>("UserName")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Email")
                        .HasName("AlternateKey_Email");


                    b.HasAlternateKey("UserName")
                        .HasName("AlternateKey_UserName");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BO.Models.UserFollow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("FollowId");

                    b.Property<bool>("IsDelete");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FollowId");

                    b.HasIndex("UserId");

                    b.ToTable("UserFollows");
                });

            modelBuilder.Entity("BO.Models.Article", b =>
                {
                    b.HasOne("BO.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedByUid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BO.Models.ArticleComment", b =>
                {
                    b.HasOne("BO.Models.Article", "Articles")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BO.Models.Comment", "Comments")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BO.Models.ArticleTag", b =>
                {
                    b.HasOne("BO.Models.Article", "Articles")
                        .WithMany("ArticleTags")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BO.Models.Tag", "Tags")
                        .WithMany("ArticleTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BO.Models.Comment", b =>
                {
                    b.HasOne("BO.Models.User", "Users")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BO.Models.Follow", b =>
                {
                    b.HasOne("BO.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BO.Models.Like", b =>
                {
                    b.HasOne("BO.Models.Article", "Articles")
                        .WithMany("Likes")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BO.Models.User", "Users")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BO.Models.UserFollow", b =>
                {
                    b.HasOne("BO.Models.Follow", "Follow")
                        .WithMany("UserFollows")
                        .HasForeignKey("FollowId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BO.Models.User", "User")
                        .WithMany("UserFollows")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
